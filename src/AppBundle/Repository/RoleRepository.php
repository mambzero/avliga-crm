<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Role;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping;
use Exception;

/**
 * RoleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RoleRepository extends EntityRepository implements RoleRepositoryInterface
{
    /**
     * RoleRepository constructor.
     * @param EntityManagerInterface|EntityManager $entityManager
     */
    public function __construct(EntityManagerInterface $entityManager)
    {
        parent::__construct($entityManager, new Mapping\ClassMetadata(Role::class));
    }

    /**
     * @return Role[]
     */
    public function getRoles(): array
    {
        return $this->findAll();
    }

    /**
     * @param string $name
     * @return Role|Object|null
     */
    public function findByName(string $name): ?Role
    {
        return $this->findOneBy(['name' => $name]);
    }

    /**
     * @param Role $role
     * @return bool
     */
    public function insert(Role $role): bool
    {
        try {
            $this->_em->persist($role);
            $this->_em->flush();
        } catch (Exception $e) {
            return false;
        }
        return true;
    }

    /**
     * @param Role $role
     * @return bool
     */
    public function update(Role $role): bool
    {
        try {
            $this->_em->merge($role);
            $this->_em->flush();
        } catch (Exception $e) {
            return false;
        }
        return true;
    }

    /**
     * @param Role $role
     * @return bool
     */
    public function delete(Role $role): bool
    {
        try {
            $this->_em->remove($role);
            $this->_em->flush();
        } catch (Exception $e) {
            return false;
        }
        return true;
    }

    /**
     * @param int $id
     * @return Role|Object|null
     */
    public function findOne(int $id): ?Role
    {
        return $this->findOneBy(['id' => $id]);
    }

    /**
     * @param int $id
     * @return string|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findNameById(int $id): ?string
    {
        $result = $this->createQueryBuilder('r')
            ->select('r.name as role')
            ->where('r.id = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getOneOrNullResult();

        return $result !== null ? $result['role'] : null;

    }
}
