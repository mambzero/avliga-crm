<?php

namespace AppBundle\Repository;

use AppBundle\Entity\User;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping;
use Exception;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserRepositoryInterface
{
    /**
     * UserRepository constructor.
     * @param EntityManagerInterface|EntityManager $entityManager
     */
    public function __construct(EntityManagerInterface $entityManager)
    {
        parent::__construct($entityManager, new Mapping\ClassMetadata(User::class));
    }

    /**
     * @param User $user
     * @return bool
     */
    public function insert(User $user): bool
    {
        try {
            $this->_em->persist($user);
            $this->_em->flush();
        } catch (Exception $e) {
            return false;
        }
        return true;
    }

    /**
     * @param User $user
     * @return bool
     */
    public function update(User $user): bool
    {
        try {
            $this->_em->merge($user);
            $this->_em->flush();
        } catch (Exception $e) {
            return false;
        }
        return true;
    }

    /**
     * @param int $id
     * @return User|Object|null
     */
    public function findOne(int $id): ?User
    {
        return $this->findOneBy(['id' => $id]);
    }

    /**
     * @param User $user
     * @return bool
     */
    public function delete(User $user): bool
    {
        try {
            $this->_em->remove($user);
            $this->_em->flush();
        } catch (Exception $e) {
            return false;
        }
        return true;
    }

    /**
     * @return User[]
     */
    public function listAll(): array
    {
        return $this->findAll();
    }

    /**
     * @param string $email
     * @return User|Object|null
     */
    public function findByEmail(string $email): ?User
    {
        return $this->findOneBy(['email' => $email]);
    }

    /**
     * @param int $id
     * @return string
     */
    public function getEmailById(int $id): ?string
    {
        try {
            $result = $this->createQueryBuilder('u')
                ->select('u.email as email')
                ->where('u.id = :id')
                ->setParameter('id', $id)
                ->getQuery()
                ->getOneOrNullResult();
        } catch (Exception $e) {
            return null;
        }

        return $result ? $result['email'] : null;
    }

    /**
     * @param int $id
     * @return string
     */
    public function getPassword(int $id): ?string
    {
        try {
            $result = $this->createQueryBuilder('u')
                ->select('u.password as pass')
                ->where('u.id = :id')
                ->setParameter('id', $id)
                ->getQuery()
                ->getOneOrNullResult();
        } catch (Exception $e) {
            return null;
        }

        return $result ? $result['pass'] : null;

    }
}
