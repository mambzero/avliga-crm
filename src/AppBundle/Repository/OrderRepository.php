<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Order;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping;
use Exception;

/**
 * OrdersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends EntityRepository implements OrderRepositoryInterface
{
    /**
     * @var array
     */
    private $errors;

    /**
     * OrderRepository constructor.
     * @param EntityManagerInterface|EntityManager $entityManager
     */
    public function __construct(EntityManagerInterface $entityManager)
    {
        parent::__construct($entityManager, new Mapping\ClassMetadata(Order::class));
    }

    /**
     * @param Order $order
     * @return bool
     */
    public function create(Order $order): bool
    {
        try {
            $this->_em->persist($order);
            $this->_em->flush();
        } catch (Exception $e) {
            $this->setError($e->getMessage());
            return false;
        }
        return true;
    }

    /**
     * @param Order $order
     * @return bool
     */
    public function update(Order $order): bool
    {
        return false;
    }

    /**
     * @return array|string
     */
    public function listAll(): array
    {

        try {
            $db = $this->_em->getConnection();
            $query = $db->executeQuery('
            SELECT
                o.id,
                c.company as client,
                sum(d.quantity) as quantity,
                sum(d.price * d.quantity) as price,
                ROUND(sum(((d.price * d.quantity)*d.discount)/100),2) as discount,
                ROUND(sum(d.price * d.quantity) - sum(((d.price * d.quantity)*d.discount)/100),2) as total,
                o.date_added as date
            FROM orders AS o
            INNER JOIN clients AS c
            ON o.client_id = c.id
            LEFT JOIN order_details AS d
            ON o.id = d.order_id
            GROUP BY d.order_id');
        } catch (Exception $e) {
            return ['error' => $e->getMessage()];
        }

        return $query->fetchAll();
    }

    /**
     * @param $id
     * @return Order|Object|null
     */
    public function findOne($id): ?Order
    {
        return $this->find($id);
    }

    /**
     * @param Order $order
     * @return bool
     */
    public function remove(Order $order): bool
    {
        try {
            $this->_em->remove($order);
            $this->_em->flush();
        } catch (Exception $e) {
            return false;
        }

        return true;

    }

    /**
     * @return array
     */
    public function getErrors(): array
    {
        return $this->errors;
    }

    /**
     * @param string $error
     */
    private function setError(string $error): void
    {
        $this->errors[] = $error;
    }

}
