<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Order;
use DateTime;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping;
use Doctrine\ORM\NonUniqueResultException;
use Exception;

/**
 * OrdersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends EntityRepository implements OrderRepositoryInterface
{
    /**
     * @var array
     */
    private $errors;

    /**
     * OrderRepository constructor.
     * @param EntityManagerInterface|EntityManager $entityManager
     */
    public function __construct(EntityManagerInterface $entityManager)
    {
        parent::__construct($entityManager, new Mapping\ClassMetadata(Order::class));
    }

    /**
     * @param Order $order
     * @return bool
     */
    public function create(Order $order): bool
    {
        try {
            $this->_em->persist($order);
            $this->_em->flush();
        } catch (Exception $e) {
            $this->setError($e->getMessage());
            return false;
        }
        return true;
    }

    /**
     * @param Order $order
     * @return bool
     */
    public function update(Order $order): bool
    {

        try {
            $this->_em->merge($order);
            $this->_em->flush();
        } catch (Exception $e) {
            $this->setError($e->getMessage());
            return false;
        }
        return true;
    }

    /**
     * @return array
     */
    public function listAll(): array
    {
        return $this->createQueryBuilder('o')
            ->select([
                'o.id',
                'c.company as client',
                'SUM(d.quantity) as quantity',
                'sum(d.price * d.quantity) as price',
                'ROUND(sum(((d.price * d.quantity)*d.discount)/100),2) as discount',
                'ROUND(sum(d.price * d.quantity) - sum(((d.price * d.quantity)*d.discount)/100),2) as total',
                'DATE_FORMAT(o.dateAdded, \'%Y-%m-%d %H:%i\') as date'
            ])
            ->join('o.client','c')
            ->leftJoin('o.details','d')
            ->groupBy('d.orderId')
            ->getQuery()
            ->getResult();
    }

    /**
     * @param $id
     * @return Order|Object|null
     */
    public function findOne($id): ?Order
    {
        return $this->find($id);
    }

    /**
     * @param Order $order
     * @return bool
     */
    public function remove(Order $order): bool
    {
        try {
            $this->_em->remove($order);
            $this->_em->flush();
        } catch (Exception $e) {
            return false;
        }

        return true;

    }

    /**
     * @return array
     */
    public function getErrors(): array
    {
        return $this->errors;
    }

    /**
     * @param string $error
     */
    private function setError(string $error): void
    {
        $this->errors[] = $error;
    }

    /**
     * @return Order[]
     */
    public function getOrders(): array
    {
        $orders = $this->findAll();

        uasort($orders, function(Order $order1, Order $order2) {
            return $order2->getDateAdded() <=> $order1->getDateAdded();
        });

        return $orders;
    }

    /**
     * @return int|null
     * @throws NonUniqueResultException
     */
    public function getOrderedProductsCount(): ?int
    {
        $result =  $this->createQueryBuilder('o')
            ->select('SUM(d.quantity) as quantity')
            ->leftJoin('o.details', 'd')
            ->getQuery()
            ->getOneOrNullResult();

        return $result['quantity'];
    }

    /**
     * @param DateTime $datetime
     * @return int|null
     * @throws NonUniqueResultException
     */
    public function countOrdersByMonth(DateTime $datetime): ?int
    {
        $result = $this->createQueryBuilder('o')
            ->select([
                'COUNT(o.id) as orders',
                'DATE_FORMAT(o.dateAdded, \'%b\') as month',
                'DATE_FORMAT(o.dateAdded, \'%Y\') as year'
            ])
            ->groupBy('month, year')
            ->having('month = :month AND year = :year')
            ->setParameters([
                'month' => $datetime->format('M'),
                'year' => $datetime->format('Y')
            ])
            ->getQuery()
            ->getOneOrNullResult();

        //dump($result); exit;

        return $result['orders'];
    }
}
